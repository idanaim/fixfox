name: Deploy to AWS App Runner

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'apps/rest-man-server/**'
      - '.github/workflows/deploy-app-runner.yml'
      - 'apprunner.yaml'
  workflow_dispatch: # Allow manual trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

env:
  AWS_REGION: 'us-west-2'

jobs:
  deploy:
    name: Deploy to AWS App Runner
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Determine environment and service name
      id: env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENV="${{ github.event.inputs.environment }}"
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ENV="prod"
        elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
          ENV="dev"
        else
          ENV="dev"  # default fallback
        fi
        
        if [ "$ENV" = "prod" ]; then
          SERVICE_NAME="fixfox-api-prod"
          ENV_DISPLAY="PRODUCTION"
        else
          SERVICE_NAME="fixfox-api-dev"
          ENV_DISPLAY="DEVELOPMENT"
        fi
        
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
        echo "env_display=$ENV_DISPLAY" >> $GITHUB_OUTPUT
        
        echo "üöÄ Deploying to: $ENV_DISPLAY"
        echo "üì¶ Service: $SERVICE_NAME"
        echo "üåø Branch: ${{ github.ref_name }}"
        
    - name: Deploy to App Runner
      run: |
        echo "üöÄ Triggering ${{ steps.env.outputs.env_display }} deployment..."
        
        # Get the service ARN
        SERVICE_ARN=$(aws apprunner list-services \
          --region ${{ env.AWS_REGION }} \
          --query "ServiceSummaryList[?ServiceName=='${{ steps.env.outputs.service_name }}'].ServiceArn" \
          --output text)
        
        if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" = "None" ]; then
          echo "‚ùå App Runner service '${{ steps.env.outputs.service_name }}' not found."
          echo "Please create the service first using the setup script."
          echo "For ${{ steps.env.outputs.env_display }}: ./scripts/setup-app-runner-${{ steps.env.outputs.environment }}.sh"
          exit 1
        fi
        
        echo "Found service: $SERVICE_ARN"
        
        # Start deployment
        aws apprunner start-deployment \
          --service-arn "$SERVICE_ARN" \
          --region ${{ env.AWS_REGION }}
        
        echo "‚úÖ ${{ steps.env.outputs.env_display }} deployment started successfully!"
        
    - name: Get service URL and health check
      run: |
        # Get the service ARN
        SERVICE_ARN=$(aws apprunner list-services \
          --region ${{ env.AWS_REGION }} \
          --query "ServiceSummaryList[?ServiceName=='${{ steps.env.outputs.service_name }}'].ServiceArn" \
          --output text)
        
        if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" = "None" ]; then
          echo "‚ùå Service not found, skipping URL check"
          exit 0
        fi
        
        # Get the service status and URL
        SERVICE_INFO=$(aws apprunner describe-service \
          --service-arn "$SERVICE_ARN" \
          --region ${{ env.AWS_REGION }} \
          --query "Service.{Status:Status,ServiceUrl:ServiceUrl}" \
          --output json)
        
        SERVICE_STATUS=$(echo "$SERVICE_INFO" | jq -r '.Status')
        SERVICE_URL=$(echo "$SERVICE_INFO" | jq -r '.ServiceUrl')
        
        echo "üìä ${{ steps.env.outputs.env_display }} Service Status: $SERVICE_STATUS"
        
        if [ "$SERVICE_URL" = "null" ] || [ -z "$SERVICE_URL" ]; then
          echo "‚è≥ Service URL not available yet (Status: $SERVICE_STATUS)"
          echo "This is normal if the service is still deploying."
        else
          echo "üåê ${{ steps.env.outputs.env_display }} Service URL: https://$SERVICE_URL"
          echo "üè• ${{ steps.env.outputs.env_display }} Health Check: https://$SERVICE_URL/api/health"
          
          # Only do health check if service is running
          if [ "$SERVICE_STATUS" = "RUNNING" ]; then
            echo "üè• Checking health of: https://$SERVICE_URL/api/health"
            
            # Perform health check with retries
            for i in {1..3}; do
              echo "Health check attempt $i/3..."
              response=$(curl -s -o /dev/null -w "%{http_code}" "https://$SERVICE_URL/api/health" || echo "000")
              
              if [ "$response" = "200" ]; then
                echo "‚úÖ ${{ steps.env.outputs.env_display }} Health check passed (HTTP $response)"
                
                # Get detailed health info
                health_data=$(curl -s "https://$SERVICE_URL/api/health")
                echo "üìä ${{ steps.env.outputs.env_display }} Health Details: $health_data"
                break
              else
                echo "‚ö†Ô∏è Health check attempt $i failed (HTTP $response)"
                if [ $i -lt 3 ]; then
                  echo "Retrying in 10 seconds..."
                  sleep 10
                fi
              fi
            done
            
            if [ "$response" != "200" ]; then
              echo "‚ùå All health check attempts failed"
              echo "Service may still be starting up."
            fi
          else
            echo "‚è≥ Skipping health check - service not running yet"
          fi
        fi
        
    - name: Deployment Success Notification
      if: success()
      run: |
        echo "üéâ ${{ steps.env.outputs.env_display }} deployment completed successfully!"
        echo "Your FixFox ${{ steps.env.outputs.env_display }} API is now live and auto-scaling!"
        echo "üåø Deployed from branch: ${{ github.ref_name }}"
        
    - name: Deployment Failure Notification
      if: failure()
      run: |
        echo "‚ùå ${{ steps.env.outputs.env_display }} deployment failed!"
        echo "üåø Branch: ${{ github.ref_name }}"
        echo "Check the App Runner console for detailed logs." 